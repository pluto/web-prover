//! proof composition is required to stitch different [`crate::program::RomCircuit`] together to
//! form an NIVC [`crate::program::data::ProgramData`].
//!
//! [`Manifest`] generated by client contains [`Request`] and [`Response`] which is used to create
//! HTTP and JSON circuits. To create the circuits, ROM is prepared containing circuits and private
//! input to each circuit.
//!
//! HTTP circuits consists of:
//! - `PARSE`: parsing raw http bytes
//! - `LOCK_START_LINE`: validating HTTP start line as per request or response
//! - `LOCK_HEADER`: validating any header in the data
//! - `MASK_BODY`: masking body in response for JSON value extraction
//!
//! JSON circuits consists of:
//! - `PARSE`: parsing JSON bytes
//! - `MASK_OBJECT`: masking any object value
//! - `MASK_ARRAY_INDEX`: masking any array index
//! - `EXTRACT_VALUE`: final template that extracts value as output

use std::collections::HashMap;

use num_bigint::BigInt;
use serde::{Deserialize, Serialize};
use serde_json::{json, Value};
use tls_client2::CipherSuiteKey;

use crate::{
  program::{
    data::{CircuitData, FoldInput},
    F, G1,
  },
  witness::{
    compute_http_header_witness, compute_http_witness, compute_json_witness, data_hasher, ByteOrPad,
  },
};

/// encryption plaintext signal label
const PLAINTEXT_SIGNAL_LABEL: &str = "plainText";
/// encryption circuit key signal label
const KEY_SIGNAL_LABEL: &str = "key";

// CHACHA Inputs
const CHACHA_COUNTER_SIGNAL_LABEL: &str = "counter";
/// Chacha nonce signal label
const CHACHA_NONCE_SIGNAL_LABEL: &str = "nonce";

/// HTTP
const DATA_SIGNAL_NAME: &str = "data";
const HTTP_START_LINE_HASH_SIGNAL_NAME: &str = "start_line_hash";
const HTTP_HEADER_HASHES_SIGNAL_NAME: &str = "header_hashes";
const HTTP_BODY_HASH_SIGNAL_NAME: &str = "body_hash";
const HTTP_MAX_HEADER: usize = 25;
const JSON_MASK_OBJECT_KEY_NAME: &str = "key";
const JSON_MASK_OBJECT_KEYLEN_NAME: &str = "keyLen";
const JSON_MAX_KEY_LENGTH: usize = 10;
const JSON_MASK_ARRAY_SIGNAL_NAME: &str = "index";

/// ideal circuit size to used for a plaintext
const CIRCUIT_SIZE: usize = 1024;

/// JSON key required to extract particular value from response
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum JsonKey {
  /// Object key
  String(String),
  /// Array index
  Num(usize),
}

/// JSON keys: `["a", "b", 0, "c"]`
#[derive(Debug, Clone, Serialize, Deserialize)]
struct ResponseBody {
  json: Vec<JsonKey>,
}

/// HTTP Response items required for circuits
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct Response {
  /// HTTP response status
  status:  String,
  /// HTTP version
  #[serde(default = "default_version")]
  version: String,
  /// HTTP response message
  #[serde(default = "default_message")]
  message: String,
  /// HTTP headers to lock
  headers: HashMap<String, String>,
  /// HTTP body keys
  body:    ResponseBody,
}

/// HTTP Request items required for circuits
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct Request {
  /// HTTP method (GET or POST)
  method:      String,
  /// HTTP request URL
  url:         String,
  /// HTTP version
  #[serde(default = "default_version")]
  version:     String,
  /// Request headers to lock
  pub headers: HashMap<String, String>,
}

/// Default HTTP version
fn default_version() -> String { "HTTP/1.1".to_string() }
/// Default HTTP message
fn default_message() -> String { "OK".to_string() }

/// Manifest containing [`Request`] and [`Response`]
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct Manifest {
  /// HTTP request lock items
  pub request:  Request,
  /// HTTP response lock items
  pub response: Response,
}

// TODO(Sambhav): can we remove usage of vec here?
/// encryption input for AES/CHACHA required to generate witness for the circuits
pub struct EncryptionInput {
  /// 128-bit key
  pub key:        CipherSuiteKey,
  /// 96-bit IV
  pub iv:         [u8; 12],
  /// 128-bit AAD
  pub aad:        Vec<u8>,
  /// plaintext to be encrypted
  pub plaintext:  Vec<u8>,
  /// ciphertext associated with plaintext
  pub ciphertext: Vec<u8>,
}

/// TLS encryption input for request and response proving
pub struct TLSEncryption {
  pub request:  EncryptionInput,
  pub response: EncryptionInput,
}

/// encryption circuit input for AES/CHACHA
struct EncryptionCircuitInput {
  /// padded plaintext
  plaintext:  Vec<ByteOrPad>,
  /// padded ciphertext
  ciphertext: Vec<ByteOrPad>,
}

/// convert bytes to u32
fn to_u32_array(input: &[u8]) -> Vec<u32> {
  // Calculate padding needed to make length divisible by 4
  let padding_needed = (4 - (input.len() % 4)) % 4;

  // Create a new vector with padding
  let padded_input =
    input.iter().chain(std::iter::repeat(&0).take(padding_needed)).cloned().collect::<Vec<u8>>();

  padded_input
    .chunks(4)
    .map(|chunk| {
      // Convert 4 bytes to u32 (little-endian)
      u32::from_le_bytes([chunk[0], chunk[1], chunk[2], chunk[3]])
    })
    .collect()
}

/// converts array of u32 to array of bits in little endian order
fn u32_array_to_le_bits(input: &[u32]) -> Vec<Vec<u8>> {
  input
    .iter()
    .map(|&num| {
      // Convert each u32 to a vector of bits (0 or 1)
      (0..32).map(|i| ((num >> (31 - i)) & 1) as u8).collect()
    })
    .collect()
}

/// convert bytes to 32 bit array and then little endian bits
pub fn to_chacha_input(input: &[u8]) -> Vec<Vec<u8>> { u32_array_to_le_bits(&to_u32_array(input)) }

pub fn make_nonce(iv: [u8; 12], seq: u64) -> [u8; 12] {
  let mut nonce = [0u8; 12];
  nonce[4..].copy_from_slice(&seq.to_be_bytes());

  nonce.iter_mut().zip(iv.iter()).for_each(|(nonce, iv)| {
    *nonce ^= *iv;
  });

  nonce
}

/// create ROM circuit data for encryption circuit from TLS inputs
///
/// # Arguments
/// - `inputs`: [`EncryptionInput`] containing TLS key, iv, aad for encryption circuit
///
/// # Returns
/// - `plaintext`: padded plaintext depending on the TLS [`CipherSuiteKey`]
/// - `rom`: NIVC ROM with each instruction's [`InstructionConfig`] depicting how the program will
///   behave and it's inputs
/// - `rom_data`: circuit's [`CircuitData`]
/// - `fold_inputs`: any input that will be distributed across folds. For AES: plaintext/ciphertext
///   is divided into 16B chunks across each fold.
///
/// **Note**: MAC is ignored from the ciphertext because circuit doesn't verify auth tag.
fn build_plaintext_authentication_circuit_inputs(
  inputs: &EncryptionInput,
  private_inputs: &mut Vec<HashMap<String, Value>>,
  _fold_inputs: &mut HashMap<String, FoldInput>,
) -> EncryptionCircuitInput {
  // handle different cipher suite, currently AES-GCM-128 & ChaCha20-Poly1305
  match inputs.key {
    CipherSuiteKey::CHACHA20POLY1305(key) => {
      // pad plaintext ciphertext to nearest circuit size
      let plaintext = ByteOrPad::from_bytes_with_padding(
        &inputs.plaintext,
        CIRCUIT_SIZE - inputs.plaintext.len(),
      );
      let ciphertext = ByteOrPad::from_bytes_with_padding(
        &inputs.ciphertext,
        CIRCUIT_SIZE - inputs.plaintext.len(),
      );

      assert_eq!(plaintext.len(), ciphertext.len());

      let nonce = make_nonce(inputs.iv, 0);

      // CHACHA rom opcode with private inputs
      private_inputs.push(HashMap::from([
        (String::from(KEY_SIGNAL_LABEL), json!(to_chacha_input(&key))),
        (String::from(CHACHA_NONCE_SIGNAL_LABEL), json!(to_chacha_input(&nonce))),
        (String::from(CHACHA_COUNTER_SIGNAL_LABEL), json!(to_chacha_input(&[1]))),
        (String::from(PLAINTEXT_SIGNAL_LABEL), json!(&plaintext)),
      ]));

      EncryptionCircuitInput { plaintext, ciphertext }
    },
    _ => {
      unimplemented!("Only CHACHA20POLY1305 is supported for now");
    },
  }
}

/// build HTTP verification circuit inputs
///
/// # Arguments
/// - `inputs`: input bytes
/// - `headers`: HTTP headers
/// - `private_inputs`: private inputs to be used in the circuit
/// - `fold_inputs`: fold inputs to be used in the circuit
///
/// # Returns
/// - `http_body`: body of the HTTP
fn build_http_verification_circuit_inputs(
  inputs: &[ByteOrPad],
  headers: &HashMap<String, String>,
  private_inputs: &mut Vec<HashMap<String, Value>>,
  _fold_inputs: &mut HashMap<String, FoldInput>,
) -> Vec<ByteOrPad> {
  // compute hashes http start line and headers signals
  let http_start_line_hash =
    data_hasher(&compute_http_witness(&inputs, crate::witness::HttpMaskType::StartLine));
  let mut http_header_hashes = vec!["0".to_string(); HTTP_MAX_HEADER];
  for header_name in headers.keys() {
    let (index, masked_header) = compute_http_header_witness(&inputs, header_name.as_bytes());
    http_header_hashes[index] =
      BigInt::from_bytes_le(num_bigint::Sign::Plus, &data_hasher(&masked_header).to_bytes())
        .to_str_radix(10);
  }

  let http_body = compute_http_witness(&inputs, crate::witness::HttpMaskType::Body);
  let http_body_hash = data_hasher(&http_body);

  // initialise rom data and rom
  private_inputs.push(HashMap::from([
    (String::from(DATA_SIGNAL_NAME), json!(&inputs)),
    (
      String::from(HTTP_START_LINE_HASH_SIGNAL_NAME),
      json!([BigInt::from_bytes_le(num_bigint::Sign::Plus, &http_start_line_hash.to_bytes())
        .to_str_radix(10)]),
    ),
    (String::from(HTTP_HEADER_HASHES_SIGNAL_NAME), json!(http_header_hashes)),
    (
      String::from(HTTP_BODY_HASH_SIGNAL_NAME),
      json!([
        BigInt::from_bytes_le(num_bigint::Sign::Plus, &http_body_hash.to_bytes()).to_str_radix(10),
      ]),
    ),
  ]));

  http_body
}

/// build JSON mask circuit inputs
///
/// # Arguments
/// - `inputs`: input bytes
/// - `keys`: JSON keys to mask
/// - `private_inputs`: private inputs to be used in the circuit
/// - `fold_inputs`: fold inputs to be used in the circuit
///
/// # Returns
/// - `masked_body`: masked body of the JSON
fn build_json_mask_circuit_inputs(
  inputs: Vec<ByteOrPad>,
  keys: &[JsonKey],
  private_inputs: &mut Vec<HashMap<String, Value>>,
  _fold_inputs: &mut HashMap<String, FoldInput>,
) -> Vec<ByteOrPad> {
  let mut masked_body = inputs;
  for key in keys.iter() {
    match key {
      JsonKey::String(json_key) => {
        // pad json key
        let mut json_key_padded = [0u8; JSON_MAX_KEY_LENGTH];
        json_key_padded[..json_key.len()].copy_from_slice(json_key.as_bytes());
        private_inputs.push(HashMap::from([
          (String::from("data"), json!(masked_body)),
          (String::from(JSON_MASK_OBJECT_KEY_NAME), json!(json_key_padded)),
          (String::from(JSON_MASK_OBJECT_KEYLEN_NAME), json!([json_key.len()])),
        ]));
        masked_body = compute_json_witness(
          &masked_body,
          crate::witness::JsonMaskType::Object(json_key.as_bytes().to_vec()),
        );
      },
      JsonKey::Num(index) => {
        private_inputs.push(HashMap::from([
          (String::from("data"), json!(masked_body)),
          (String::from(JSON_MASK_ARRAY_SIGNAL_NAME), json!([index])),
        ]));
        masked_body =
          compute_json_witness(&masked_body, crate::witness::JsonMaskType::ArrayIndex(*index));
      },
    }
  }
  masked_body
}

/// NIVC ROM containing circuit data and rom
pub struct NIVCRom {
  /// [`CircuitData`] for each instruction
  pub circuit_data: HashMap<String, CircuitData>,
  /// NIVC ROM containing opcodes defining the computation.
  pub rom:          Vec<String>,
}

/// NIVC circuit inputs containing private inputs, fold inputs and initial nivc input
pub struct NivcCircuitInputs {
  /// private inputs to be used for each circuit defined circuit input label wise
  pub private_inputs:     Vec<HashMap<String, serde_json::Value>>,
  /// fold inputs to be used for each circuit, later expanded across folds
  pub fold_inputs:        HashMap<String, FoldInput>,
  /// initial public input
  pub initial_nivc_input: Vec<F<G1>>,
}

impl Request {
  /// builds private inputs for [`Manifest`] request.
  /// # circuits
  /// - plaintext authentication
  /// - http verification
  pub fn build_inputs(&self, inputs: &EncryptionInput) -> NivcCircuitInputs {
    assert_eq!(inputs.plaintext.len(), inputs.ciphertext.len());

    let mut private_inputs = vec![];
    let mut fold_inputs: HashMap<String, FoldInput> = HashMap::new();

    let EncryptionCircuitInput { plaintext, ciphertext } =
      build_plaintext_authentication_circuit_inputs(&inputs, &mut private_inputs, &mut fold_inputs);

    let _ = build_http_verification_circuit_inputs(
      &plaintext,
      &self.headers,
      &mut private_inputs,
      &mut fold_inputs,
    );

    NivcCircuitInputs {
      private_inputs,
      fold_inputs,
      initial_nivc_input: vec![data_hasher(&ciphertext)],
    }
  }

  /// builds ROM for [`Manifest`] request.
  /// # circuits
  /// - plaintext authentication
  /// - http verification
  pub fn build_rom(&self) -> NIVCRom {
    let chacha_instr_label = String::from("PLAINTEXT_AUTHENTICATION");
    let rom_data = HashMap::from([
      (chacha_instr_label.clone(), CircuitData { opcode: 0 }),
      (String::from("HTTP_VERIFICATION"), CircuitData { opcode: 1 }),
    ]);

    let rom = vec![chacha_instr_label, String::from("HTTP_VERIFICATION")];

    NIVCRom { circuit_data: rom_data, rom }
  }
}

impl Response {
  /// builds private inputs for [`Manifest`] response.
  /// # circuits
  /// - plaintext authentication
  /// - http verification
  /// - json mask (depending on the keys)
  /// - final extraction
  pub fn build_inputs(&self, inputs: EncryptionInput) -> NivcCircuitInputs {
    assert_eq!(inputs.plaintext.len(), inputs.ciphertext.len());

    let mut private_inputs = vec![];
    let mut fold_inputs: HashMap<String, FoldInput> = HashMap::new();

    let EncryptionCircuitInput { plaintext, ciphertext } =
      build_plaintext_authentication_circuit_inputs(&inputs, &mut private_inputs, &mut fold_inputs);

    let ciphertext_hash = data_hasher(&ciphertext);

    let http_body = build_http_verification_circuit_inputs(
      &plaintext,
      &self.headers,
      &mut private_inputs,
      &mut fold_inputs,
    );

    // json keys
    let masked_body = build_json_mask_circuit_inputs(
      http_body,
      &self.body.json,
      &mut private_inputs,
      &mut fold_inputs,
    );

    // final extraction
    private_inputs.push(HashMap::from([(String::from(DATA_SIGNAL_NAME), json!(masked_body))]));

    NivcCircuitInputs { fold_inputs, private_inputs, initial_nivc_input: vec![ciphertext_hash] }
  }

  /// builds ROM for [`Manifest`] response.
  /// # circuits
  /// - plaintext authentication
  /// - http verification
  /// - json mask (depending on the keys)
  /// - final extraction
  /// # Returns
  /// - [`NIVCRom`] containing circuit data and rom
  pub fn build_rom(&self) -> NIVCRom {
    let chacha_instr_label = String::from("PLAINTEXT_AUTHENTICATION");
    let mut rom_data = HashMap::from([
      (chacha_instr_label.clone(), CircuitData { opcode: 0 }),
      (String::from("HTTP_VERIFICATION"), CircuitData { opcode: 1 }),
    ]);

    let mut rom = vec![chacha_instr_label, String::from("HTTP_VERIFICATION")];

    // json keys
    for (i, key) in self.body.json.iter().enumerate() {
      match key {
        JsonKey::String(_) => {
          // pad json key
          rom_data.insert(format!("JSON_MASK_OBJECT_{}", i + 1), CircuitData { opcode: 2 });
          rom.push(format!("JSON_MASK_OBJECT_{}", i + 1));
        },
        JsonKey::Num(_) => {
          rom_data.insert(format!("JSON_MASK_ARRAY_{}", i + 1), CircuitData { opcode: 3 });
          rom.push(format!("JSON_MASK_ARRAY_{}", i + 1));
        },
      }
    }

    // final extraction
    rom_data.insert(String::from("EXTRACT_VALUE"), CircuitData { opcode: 4 });
    rom.push(String::from("EXTRACT_VALUE"));

    NIVCRom { circuit_data: rom_data, rom }
  }
}

#[cfg(test)]
mod tests {
  use super::*;

  const AEAD_IV: (&str, [u8; 12]) = ("iv", [49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49]);
  const AEAD_AAD: (&str, [u8; 16]) = ("aad", [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);
  const CHACHA_KEY: (&str, [u8; 32]) = ("key", [0u8; 32]);
  const TEST_MANIFEST_REQUEST: &[u8] = &[
    71, 69, 84, 32, 104, 116, 116, 112, 115, 58, 47, 47, 103, 105, 115, 116, 46, 103, 105, 116,
    104, 117, 98, 117, 115, 101, 114, 99, 111, 110, 116, 101, 110, 116, 46, 99, 111, 109, 47, 109,
    97, 116, 116, 101, 115, 47, 50, 51, 101, 54, 52, 102, 97, 97, 100, 98, 53, 102, 100, 52, 98,
    53, 49, 49, 50, 102, 51, 55, 57, 57, 48, 51, 100, 50, 53, 55, 50, 101, 47, 114, 97, 119, 47,
    55, 52, 101, 53, 49, 55, 97, 54, 48, 99, 50, 49, 97, 53, 99, 49, 49, 100, 57, 52, 102, 101, 99,
    56, 98, 53, 55, 50, 102, 54, 56, 97, 100, 100, 102, 97, 100, 101, 51, 57, 47, 101, 120, 97,
    109, 112, 108, 101, 46, 106, 115, 111, 110, 32, 72, 84, 84, 80, 47, 49, 46, 49, 13, 10, 104,
    111, 115, 116, 58, 32, 103, 105, 115, 116, 46, 103, 105, 116, 104, 117, 98, 117, 115, 101, 114,
    99, 111, 110, 116, 101, 110, 116, 46, 99, 111, 109, 13, 10, 97, 99, 99, 101, 112, 116, 45, 101,
    110, 99, 111, 100, 105, 110, 103, 58, 32, 105, 100, 101, 110, 116, 105, 116, 121, 13, 10, 99,
    111, 110, 110, 101, 99, 116, 105, 111, 110, 58, 32, 99, 108, 111, 115, 101, 13, 10, 97, 99, 99,
    101, 112, 116, 58, 32, 42, 47, 42, 0, 0,
  ];
  const TEST_MANIFEST_RESPONSE: &[u8] = &[
    72, 84, 84, 80, 47, 49, 46, 49, 32, 50, 48, 48, 32, 79, 75, 13, 10, 99, 111, 110, 116, 101,
    110, 116, 45, 116, 121, 112, 101, 58, 32, 97, 112, 112, 108, 105, 99, 97, 116, 105, 111, 110,
    47, 106, 115, 111, 110, 59, 32, 99, 104, 97, 114, 115, 101, 116, 61, 117, 116, 102, 45, 56, 13,
    10, 99, 111, 110, 116, 101, 110, 116, 45, 101, 110, 99, 111, 100, 105, 110, 103, 58, 32, 103,
    122, 105, 112, 13, 10, 84, 114, 97, 110, 115, 102, 101, 114, 45, 69, 110, 99, 111, 100, 105,
    110, 103, 58, 32, 99, 104, 117, 110, 107, 101, 100, 13, 10, 13, 10, 123, 13, 10, 32, 32, 32,
    34, 100, 97, 116, 97, 34, 58, 32, 123, 13, 10, 32, 32, 32, 32, 32, 32, 32, 34, 105, 116, 101,
    109, 115, 34, 58, 32, 91, 13, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 123, 13, 10, 32,
    32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 34, 100, 97, 116, 97, 34, 58, 32, 34,
    65, 114, 116, 105, 115, 116, 34, 44, 13, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
    32, 32, 32, 34, 112, 114, 111, 102, 105, 108, 101, 34, 58, 32, 123, 13, 10, 32, 32, 32, 32, 32,
    32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 34, 110, 97, 109, 101, 34, 58, 32, 34, 84, 97, 121,
    108, 111, 114, 32, 83, 119, 105, 102, 116, 34, 13, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
    32, 32, 32, 32, 32, 125, 13, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 125, 13, 10, 32,
    32, 32, 32, 32, 32, 32, 93, 13, 10, 32, 32, 32, 125, 13, 10, 125,
  ];
  const TEST_MANIFEST: &str = r#"
  {
      "manifestVersion": "1",
      "id": "reddit-user-karma",
      "title": "Total Reddit Karma",
      "description": "Generate a proof that you have a certain amount of karma",
      "prepareUrl": "https://www.reddit.com/login/",
      "request": {
          "method": "GET",
          "url": "https://gist.githubusercontent.com/mattes/23e64faadb5fd4b5112f379903d2572e/raw/74e517a60c21a5c11d94fec8b572f68addfade39/example.json",
          "headers": {
              "host": "gist.githubusercontent.com",
              "connection": "close"
          },
          "body": {
              "userId": "<% userId %>"
          },
          "vars": {
              "userId": {
                  "regex": "[a-z]{,20}+"
              },
              "token": {
                  "type": "base64",
                  "length": 32
              }
          }
      },
      "response": {
          "status": "200",
          "headers": {
              "Content-Type": "application/json"
          },
          "body": {
              "json": [
                  "data",
                  "items",
                  0
              ],
              "contains": "this_string_exists_in_body"
          }
      }
  }
  "#;

  #[test]
  fn test_serialize() {
    let manifest: Manifest = serde_json::from_str(TEST_MANIFEST).unwrap();
    // verify defaults are working
    assert_eq!(manifest.request.version, "HTTP/1.1");
    assert_eq!(manifest.request.method, "GET");
    assert_eq!(manifest.request.headers.len(), 2);
    assert_eq!(manifest.request.headers.get("host").unwrap(), "gist.githubusercontent.com");

    // verify defaults are working
    assert_eq!(manifest.response.status, "200");
    assert_eq!(manifest.response.version, "HTTP/1.1");
    assert_eq!(manifest.response.headers.len(), 1);
    assert_eq!(manifest.response.headers.get("Content-Type").unwrap(), "application/json");
    assert_eq!(manifest.response.body.json.len(), 3);
  }

  #[test]
  fn generate_chacha_rom_from_request() {
    let manifest: Manifest = serde_json::from_str(TEST_MANIFEST).unwrap();

    let NivcCircuitInputs { fold_inputs, private_inputs, .. } =
      manifest.request.build_inputs(&EncryptionInput {
        key:        tls_client2::CipherSuiteKey::CHACHA20POLY1305(CHACHA_KEY.1),
        iv:         AEAD_IV.1,
        aad:        AEAD_AAD.1.to_vec(),
        plaintext:  TEST_MANIFEST_REQUEST.to_vec(),
        ciphertext: TEST_MANIFEST_REQUEST.to_vec(),
      });
    let NIVCRom { circuit_data: rom_data, rom } = manifest.request.build_rom();

    // CHACHA + HTTP verification
    assert_eq!(rom_data.len(), 2);
    assert_eq!(rom_data.get(&String::from("HTTP_VERIFICATION")).unwrap().opcode, 1);

    // should contain http parse and http headers
    assert_eq!(rom.len(), 1 + 1);

    // assert http parse inputs
    let http_instruction_len = 1;
    assert_eq!(rom[http_instruction_len], "HTTP_VERIFICATION");
    assert!(private_inputs[http_instruction_len].contains_key("start_line_hash"));
    assert!(private_inputs[http_instruction_len].contains_key("header_hashes"));
    assert!(private_inputs[http_instruction_len].contains_key("body_hash"));

    assert!(!fold_inputs.contains_key(&String::from("PLAINTEXT_AUTHENTICATION")));
  }

  #[test]
  fn generate_chacha_rom_from_response() {
    let manifest: Manifest = serde_json::from_str(TEST_MANIFEST).unwrap();

    let NivcCircuitInputs { fold_inputs, private_inputs, .. } =
      manifest.response.build_inputs(EncryptionInput {
        key:        tls_client2::CipherSuiteKey::CHACHA20POLY1305(CHACHA_KEY.1),
        iv:         AEAD_IV.1,
        aad:        AEAD_AAD.1.to_vec(),
        plaintext:  TEST_MANIFEST_RESPONSE.to_vec(),
        ciphertext: TEST_MANIFEST_RESPONSE.to_vec(),
      });
    let NIVCRom { circuit_data: rom_data, rom } = manifest.response.build_rom();

    // CHACHA + http + json mask (object + array) + extract
    assert_eq!(rom_data.len(), 1 + 1 + manifest.response.body.json.len() + 1);
    // HTTP + json keys + extract value
    assert_eq!(
      rom_data.get(&String::from("EXTRACT_VALUE")).unwrap().opcode,
      (1 + manifest.response.body.json.len()) as u64
    );

    assert_eq!(rom.len(), 1 + 1 + manifest.response.body.json.len() + 1);

    // assert http parse inputs
    let http_instruction_len = 1;

    assert_eq!(rom[http_instruction_len], String::from("HTTP_VERIFICATION"));
    assert!(private_inputs[http_instruction_len].contains_key("start_line_hash"));
    assert!(private_inputs[http_instruction_len].contains_key("header_hashes"));
    assert!(private_inputs[http_instruction_len].contains_key("body_hash"));

    // check final circuit is extract
    assert_eq!(rom[rom.len() - 1], String::from("EXTRACT_VALUE"));
    assert!(private_inputs[rom.len() - 1].contains_key("data"));

    assert!(!fold_inputs.contains_key(&String::from("PLAINTEXT_AUTHENTICATION")));
  }

  #[test]
  fn chacha_input_handling() {
    let counter_u32 = [1];
    let res = to_u32_array(&counter_u32);
    assert_eq!(res, [1]);

    let counter_back = u32_array_to_le_bits(&res);
    assert_eq!(counter_back, vec![vec![
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      1
    ]]);

    let http_u32 = "HTTP".as_bytes();
    assert_eq!(to_u32_array(http_u32), [1347703880]);

    let http_bits = u32_array_to_le_bits(&to_u32_array(http_u32));
    assert_eq!(http_bits, [[
      0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0,
      0
    ]]);
  }
}
