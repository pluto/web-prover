[package]
name   ="client"
version="0.1.0"
edition="2021"
build  ="../build.rs"

[features]
websocket=[]

# used in build.rs, activate by setting NOTARY_CA_CERT_PATH as env variable
# used for local development
notary_ca_cert=[]

# Shared dependencies for all targets
[dependencies]
# TLSN
tls-client={ workspace=true }
tls-client2={ path="../tls/tls-client", package="tls-client" }
tls-client-async2={ path="../tls/tls-client-async", package="tls-client-async", features=[
  "tracing",
] }
tls-proxy2={ path="../tls/tls-proxy", package="tls-proxy" }

webpki-roots="0.26.1"
pki-types   ={ package="rustls-pki-types", version="1.7" }
cfg-if      ="1.0.0"
# Serde
serde.workspace     =true
serde_json.workspace=true
# Web
url           ="2.5"
hyper         ={ version="1.4", features=["client", "http1"] }
http-body-util="0.1"
# Logging and errors
tracing.workspace           =true
tracing-subscriber.workspace=true
thiserror                   ="1.0.61"
# Async
futures     ="0.3"
futures-util="0.3.28"
# Other
base64="0.22.0"
tokio-util={ version="0.7", features=[
  "compat",
] } # compat is used to work with AsyncRead and AsyncWrite from other crates
chrono="0.4"
p256={ version="0.13", features=["pem", "ecdsa"] }
[dependencies.uuid]
version         ="1.10.0"
default-features=false
features        =["v4"]

####################################################################################################
# Target-specific configuration
####################################################################################################

#- Non-wasm target configuration ------------------------------------------------------------------#
[target.'cfg(not(target_arch = "wasm32"))'.dependencies]
# Web
hyper-util={ version="0.1", features=["full"] }
# Async
tokio-rustls={ version="0.24", default-features=false, features=["logging", "tls12"] }
tokio       ={ version="1", features=["rt", "rt-multi-thread", "macros", "net", "io-std", "fs"] }
rustls      ={ version="0.21", default-features=false }
# TLSN
tlsn-prover          ={ workspace=true }
tlsn-core            ={ workspace=true }
async-tungstenite    ={ version="0.25.1", features=["async-std-runtime", "async-tls"] }
ws_stream_tungstenite={ version="0.13.0", features=["tokio_io"] }
clap                 ={ version="4.5.13", features=["derive"] }
anyhow               ="1.0.86"
reqwest              ={ version="0.12", features=["json", "rustls-tls"] }

#- Wasm target configuration ----------------------------------------------------------------------#
[target.'cfg(target_arch = "wasm32")'.dependencies]
# Web
hyper-util={ version="0.1", features=["http1"] }
## Use the patched ws_stream_wasm to fix the issue https://github.com/najamelan/ws_stream_wasm/issues/12#issuecomment-1711902958
ws_stream_wasm={ version="0.7.4", git="https://github.com/tlsnotary/ws_stream_wasm", rev="2ed12aad9f0236e5321f577672f309920b2aef51" }
# Serde
serde-wasm-bindgen="0.6.5"
reqwest           ={ version="0.12", features=["json"] }

# Other
ring          ={ version="0.17", default-features=false, features=["wasm32_unknown_unknown_js"] }
elliptic-curve={ version="0.13.5", features=["pkcs8"] }
getrandom     ={ version="0.2", features=["js"] }
js-sys        ="0.3.64"
p256          ={ version="0.13", features=["pem", "ecdsa"] }
rayon         ="1.5"
# time crate: https://crates.io/crates/time
# NOTE: It is required, otherwise "time not implemented on this platform" error happens right after "!@# 2".
# Probably due to tokio's time feature is used in tlsn-prover?
time={ version="0.3.34", features=["wasm-bindgen"] }
# Used to calculate elapsed time.
web-time="1.0"

web-sys={ version="0.3.4", features=[
  "BinaryType",
  "Blob",
  "ErrorEvent",
  "FileReader",
  "MessageEvent",
  "ProgressEvent",
  "WebSocket",
  "console",
  'Document',
  'HtmlElement',
  'HtmlInputElement',
  'Window',
  'Worker',
  'Headers',
  'Request',
  'RequestInit',
  'RequestMode',
  'Response',
] }

# The `console_error_panic_hook` crate provides better debugging of panics by
# logging them with `console.error`. This is great for development, but requires
# all the `std::fmt` and `std::panicking` infrastructure, so isn't great for
# code size when deploying.
console_error_panic_hook={ version="0.1.7" }
pin-project-lite        ="0.2.4"
wasm-bindgen            ="0.2.87"
wasm-bindgen-futures    ="0.4.37"
wasm-bindgen-rayon      ="1.0"
tracing-subscriber      ={ version="0.3", features=["time", "env-filter"] }
tracing-web             ="0.1.2"

parking_lot={ version="0.12", features=["nightly"] }

strum       ={ version="0.26.1" }
strum_macros="0.26.1"

# TLSN
tlsn-prover={ workspace=true }
tlsn-core  ={ workspace=true }
tls-client ={ workspace=true }

[target.'cfg(target_arch = "wasm32")'.dev-dependencies]
wasm-bindgen-test="0.3.42"

# [package.metadata.wasm-pack.profile.release]
# wasm-opt=false
#---------------------------------------------------------------------------------------------#
