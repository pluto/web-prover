[package]
name   ="client"
version="0.3.0"
edition="2021"
build  ="build.rs"
publish=false

[features]
default=["tee-dummy-token-verifier"]

websocket=[]
tracing  =[]

# used to disable cert verification, useful for development
unsafe_skip_cert_verification=[]

tee-dummy-token-verifier                    =[]
tee-google-confidential-space-token-verifier=[]

[build-dependencies]
cargo_metadata="0.19.1"

# Shared dependencies for all targets
[dependencies]
# TLS
tls-client        ={ workspace=true }
tls-client2       ={ workspace=true }
tls-core          ={ workspace=true }
client-side-prover={ git="https://github.com/pluto/client-side-prover", rev="8e7eb839e901dcee416179116bb0f9c4f7ae683c" }

# TLSN
tlsn-prover={ workspace=true }
tlsn-core  ={ workspace=true }

caratls_ekm_client                          ={ workspace=true }
caratls_ekm_google_confidential_space_client={ workspace=true }

bytes                               ="1"
proofs                              ={ workspace=true }
web-proof-circuits-witness-generator={ workspace=true }

serde-wasm-bindgen="0.6.5"

webpki-roots="0.26.1"
pki-types   ={ package="rustls-pki-types", version="1.7" }
# Serde
serde     ={ workspace=true }
serde_json={ workspace=true }
# Web
hex           ="0.4"
url           ="2.5"
hyper         ={ workspace=true, features=["client", "http1"] }
http-body-util={ workspace=true }
# Logging and errors
tracing           ={ workspace=true }
tracing-subscriber={ workspace=true }
thiserror         ={ workspace=true }
# Async
futures={ workspace=true }
# Other
base64="0.22.0"
tokio-util={ version="0.7", features=[
  "compat",
] } # compat is used to work with AsyncRead and AsyncWrite from other crates
chrono="0.4"
p256={ version="0.13", features=["pem", "ecdsa"] }

uuid={ version="1.10.0", default-features=false, features=["v4"] }

clap      ={ workspace=true }
serde_with={ version="3.12.0", features=["base64"] }

####################################################################################################
# Target-specific configuration
####################################################################################################

#- Non-wasm target configuration ------------------------------------------------------------------#
[target.'cfg(not(target_arch = "wasm32"))'.dependencies]
# Web
hyper-util={ workspace=true }
# Async
tokio-rustls={ version="0.26", default-features=false, features=["logging", "tls12"] }
tokio       ={ workspace=true, features=["rt", "rt-multi-thread", "macros", "net", "io-std", "fs"] }
rustls      ={ version="0.23", default-features=false, features=["ring"] }
# TLSN
async-tungstenite    ={ version="0.25.1", features=["async-std-runtime", "async-tls"] }
ws_stream_tungstenite={ version="0.13.0", features=["tokio_io"] }
reqwest              ={ version="0.12", features=["json", "rustls-tls"] }

#- Wasm target configuration ----------------------------------------------------------------------#
[target.'cfg(target_arch = "wasm32")'.dependencies]
# Web
hyper-util={ version="0.1", features=["http1"] }
## Use the patched ws_stream_wasm to fix the issue https://github.com/najamelan/ws_stream_wasm/issues/12#issuecomment-1711902958
ws_stream_wasm={ version="0.7.4", git="https://github.com/tlsnotary/ws_stream_wasm", rev="2ed12aad9f0236e5321f577672f309920b2aef51", features=[
  "tokio_io",
] }
# Serde
serde-wasm-bindgen="0.6.5"
reqwest           ={ version="0.12", features=["json"] }

# Other
ring          ={ version="0.17", default-features=false, features=["wasm32_unknown_unknown_js"] }
elliptic-curve={ version="0.13.5", features=["pkcs8"] }
getrandom     ={ version="0.2", features=["js"] }
js-sys        ="0.3.64"
p256          ={ version="0.13", features=["pem", "ecdsa"] }
# time crate: https://crates.io/crates/time
# NOTE: It is required, otherwise "time not implemented on this platform" error happens right after "!@# 2".
# Probably due to tokio's time feature is used in tlsn-prover?
time={ version="0.3.34", features=["wasm-bindgen"] }
# Used to calculate elapsed time.
web-time="1.0"

web-sys={ version="0.3.4", features=[
  "BinaryType",
  "Blob",
  "ErrorEvent",
  "FileReader",
  "MessageEvent",
  "ProgressEvent",
  "WebSocket",
  "console",
  'Document',
  'HtmlElement',
  'HtmlInputElement',
  'Window',
  'Worker',
  'Headers',
  'Request',
  'RequestInit',
  'RequestMode',
  'Response',
] }

# The `console_error_panic_hook` crate provides better debugging of panics by
# logging them with `console.error`. This is great for development, but requires
# all the `std::fmt` and `std::panicking` infrastructure, so isn't great for
# code size when deploying.
console_error_panic_hook={ version="0.1.7" }
pin-project-lite        ="0.2.4"
wasm-bindgen            ="0.2.87"
wasm-bindgen-futures    ="0.4.37"
wasm-bindgen-rayon      ="1.0"
tracing-subscriber      ={ version="0.3", features=["time", "env-filter"] }
tracing-web             ="0.1.2"

parking_lot={ version="0.12", features=["nightly"] }

strum       ={ version="0.26.1" }
strum_macros="0.26.1"

[target.'cfg(target_arch = "wasm32")'.dev-dependencies]
wasm-bindgen-test="0.3.42"

#---------------------------------------------------------------------------------------------#
