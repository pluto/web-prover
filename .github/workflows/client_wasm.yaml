name: client_wasm

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  push:
    branches: ['main']
  pull_request:
    branches: ['main']

jobs:
  setup:
    uses: ./.github/workflows/download-circuits.yaml
  build:
    needs: setup
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]

    name: client_wasm on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}

    env:
      CARGO_TERM_COLOR: always

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: Swatinem/rust-cache@v2

      - name: Install Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: nightly-2024-10-28
          components: rust-src
          targets: wasm32-unknown-unknown

      # Add platform-specific targets
      - name: Add Linux target
        if: matrix.os == 'ubuntu-latest'
        run: rustup target add x86_64-unknown-linux-gnu --toolchain nightly-2024-10-28

      - name: Add macOS target
        if: matrix.os == 'macos-latest'
        run: rustup target add aarch64-apple-darwin --toolchain nightly-2024-10-28

      - run: sudo apt install -y protobuf-compiler
        if: matrix.os == 'ubuntu-latest'

      - name: Install LLVM and Clang to support 'ring' crate and protobuf
        if: matrix.os == 'macos-latest'
        run: |
          brew install llvm@18 # https://formulae.brew.sh/formula/llvm#default
          echo /opt/homebrew/opt/llvm@18/bin >> $GITHUB_PATH
          brew install protobuf

      - name: Install unzip (linux)
        if: matrix.os == 'ubuntu-latest'
        run: sudo apt install unzip -y

      - name: Restore circuit artifacts
        uses: actions/cache@v3
        with:
          path: proofs/web_proof_circuits
          key: ${{ needs.setup.outputs.cache-key }}

      # TODO run automated tests?
      #      wasm-pack test --firefox
      #      docs: https://rustwasm.github.io/docs/wasm-pack/tutorials/npm-browser-packages/testing-your-project.html

      - name: compile wasm
        run: |
          make wasm

      # Add Node.js setup for Playwright
      - uses: actions/setup-node@v4
        with:
          node-version: '20'

      # Install npm dependencies and Playwright
      - name: Install dependencies
        working-directory: client_wasm/demo
        run: |
          npm install
          npx playwright install --with-deps

      # Start notary in background
      - name: Start notary
        run: |
          RUST_LOG=DEBUG cargo +nightly-2024-10-28 run --release -p notary -- --config ./fixture/notary-config.toml  --manifest ./fixture/notary.origo_tcp_local.json &
          echo "Waiting for notary to start..."
          sleep 30

      # Run Playwright tests
      - name: Run Playwright tests
        working-directory: client_wasm/demo
        run: npm test

      # Upload test results on failure
      - uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: playwright-report-${{ matrix.os }}
          path: client_wasm/demo/playwright-report/
          retention-days: 30

      # Continue with existing artifact upload steps
      - run: 'tar czf pkg.tar.gz ./pkg/*'
        if: matrix.os == 'ubuntu-latest'
        working-directory: 'client_wasm'

      - uses: actions/upload-artifact@v4
        if: matrix.os == 'ubuntu-latest'
        with:
          name: 'wasm.tar.gz'
          path: 'client_wasm/pkg.tar.gz'
